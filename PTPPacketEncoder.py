# -LICENSE-START-
# Copyright (c) 2020 Blackmagic Design
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# -LICENSE-END-
#

import fixedint
from PTPTypes import *
from PTPContainer import *

class PTPPacketEncoder:

	def __init__(self):
		self.m_ptpPacketEncoderDelegate = None
	    
	def setDelegate(self, delegate):
		self.m_ptpPacketEncoderDelegate = delegate
	
	def encodeOpenSessionCommand(self, transactionId: fixedint.UInt32, sessionId: fixedint.UInt8) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.OpenSession.value)
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(sessionId)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeCloseSessionCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.CloseSession.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	# Get device info is allowed to be called without a session
	def encodeGetDeviceInfoCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.GetDeviceInfo.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeGetDevicePropDescCommand(self, transactionId: fixedint.UInt32, devicePropCode: DevicePropCode) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.GetDevicePropDesc.value)
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(DevicePropCodeType(devicePropCode.value))

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeStartRecordCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.StartRecord.value)
		container.m_containerData.transactionId = transactionId

		storageId = fixedint.UInt32(0)
		container.appendToEndOfPayload(storageId)
		
		objectFormatCode = fixedint.UInt32(ObjectFormatCodeType(ObjectFormatCode.Unspecified.value))
		container.appendToEndOfPayload(objectFormatCode)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeStopRecordCommand(self, transactionId: TransactionID, transactionIdToStop: TransactionID) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.StopRecord.value)
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(transactionIdToStop)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeStillCaptureCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.StillCapture.value)
		container.m_containerData.transactionId = transactionId
		
		storageId = fixedint.UInt32(0)
		container.appendToEndOfPayload(storageId)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeChangeFocusCommand(self, transactionId: fixedint.UInt32, nearer: bool, steps: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.ChangeFocus.value)
		container.m_containerData.transactionId = transactionId
		
		kNearer, kFarther = fixedint.UInt32(1), fixedint.UInt32(2)
		if nearer:	container.appendToEndOfPayload(kNearer)
		else:		container.appendToEndOfPayload(kFarther)
		container.appendToEndOfPayload(steps)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeAutoFocusCommand(self, transactionId: fixedint.UInt32, xPosRatio: float, yPosRatio: float) -> bool:
		if xPosRatio is None: xPosRatio = 0.0
		if yPosRatio is None: yPosRatio = 0.0
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.InitiateAutoFocus.value)
		container.m_containerData.transactionId = transactionId
		
		kCenter, kCustom = fixedint.UInt32(0), fixedint.UInt32(1)
		if ((xPosRatio == 0) | (yPosRatio == 0)):
			container.appendToEndOfPayload(kCenter)
		else:
			container.appendToEndOfPayload(kCustom)
			container.appendToEndOfPayload(fixedint.UInt32(xPosRatio * 1000))
			container.appendToEndOfPayload(fixedint.UInt32(yPosRatio * 1000))
		
		storageId = fixedint.UInt32(0)
		container.appendToEndOfPayload(storageId)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeCancelAutoFocusCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.TerminateAutoFocus.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False	
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeEnableAutoWhiteBalanceCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.EnableAutoWhiteBalance.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeDisableAutoWhiteBalanceCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.EnableAutoWhiteBalance.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
			
	def encodeEnableAutoExposureCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.EnableAutoExposure.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
	
	def encodeDisableAutoExposureCommand(self, transactionId: fixedint.UInt32) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.DisableAutoExposure.value)
		container.m_containerData.transactionId = transactionId

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
			
	# Read DevicePropCode
	def encodeGetDevicePropValueCommand(self, transactionId: fixedint.UInt32, devicePropCode: DevicePropCode) -> bool:
		container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCodeType(OperationCode.GetDevicePropValue.value)
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(DevicePropCodeType(devicePropCode.value))

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(container, None)
			
	# Write DevicePropCode
	def encodeSetDevicePropValueCommand(self, transactionId: fixedint.UInt32, devicePropCode: DevicePropCode, value) -> bool:
		command = Container()
		command.reset()
		command.m_containerData.type = ContainerData.ContainerType.CommandBlock
		command.m_containerData.code = OperationCodeType(OperationCode.SetDevicePropValue.value)
		command.m_containerData.transactionId = transactionId
		command.appendToEndOfPayload(DevicePropCodeType(devicePropCode.value))
		
		data = Container()
		data.reset()
		data.m_containerData.type = ContainerData.ContainerType.DataBlock
		data.m_containerData.code = OperationCodeType(OperationCode.SetDevicePropValue.value)
		data.m_containerData.transactionId = transactionId
		data.appendToEndOfPayload(value)

		if self.m_ptpPacketEncoderDelegate is None: return False
		return self.m_ptpPacketEncoderDelegate.onPTPPacketEncoded(command, data)
