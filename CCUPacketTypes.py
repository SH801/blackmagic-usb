# -LICENSE-START-
# Copyright (c) 2018 Blackmagic Design
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# -LICENSE-END-
#

import fixedint
from typing import List
from BaseEnum import *
from LogFunctions import *

PacketFormatIndexType           = fixedint.UInt8
DataTypesType                   = fixedint.UInt8
OperationTypeType               = fixedint.UInt8
CommandIDType                   = fixedint.UInt8
CategoryType                    = fixedint.UInt8
LensParameterType               = fixedint.UInt8
VideoParameterType              = fixedint.UInt8
AudioParameterType              = fixedint.UInt8
OutputParameterType             = fixedint.UInt8
DisplayParameterType            = fixedint.UInt8
TallyParameterType              = fixedint.UInt8
ReferenceParameterType          = fixedint.UInt8
ConfigurationParameterType      = fixedint.UInt8
ColorCorrectionParameterType    = fixedint.UInt8
StatusParameterType             = fixedint.UInt8
MediaParameterType              = fixedint.UInt8
ExDevControlParameterType       = fixedint.UInt8
MetadataParameterType           = fixedint.UInt8
VideoModeMRateType              = fixedint.UInt8
VideoModeDimensionsType         = fixedint.UInt8
VideoModeInterlacedType         = fixedint.UInt8
VideoModeColorspaceType         = fixedint.UInt8
VideoDynamicRangeType           = fixedint.UInt8
VideoRecordingFormatType        = fixedint.UInt16
AutoExposureModeType            = fixedint.Int8
DisplayTimecodeSourceType       = fixedint.Int8    
BatteryStatusType               = fixedint.UInt16
MediaStatusType                 = fixedint.Int8
DisplayFocusAssistModeType      = fixedint.Int32
ApertureUnitsType               = fixedint.Int16
ApertureStepLengthType          = fixedint.Int16
DisplayFocusAssistColourType    = fixedint.Int32
CameraManufacturerType          = fixedint.UInt8
CameraVariantsType              = fixedint.UInt8
ColorScienceGenerationType      = fixedint.UInt8
FrameGuideStyleType             = fixedint.UInt8
GridStyleFlagType               = fixedint.UInt8
SwitcherStatusFlagType          = fixedint.UInt8    
BasicCodecType                  = fixedint.UInt8
CodecVariantsType               = fixedint.UInt8
MediaTransportModeType          = fixedint.UInt8
MediaTransportFlagType          = fixedint.UInt8
ActiveStorageMediumType         = fixedint.UInt8
MetadataSceneTagType            = fixedint.Int8
MetadataLocationTypeTagType     = fixedint.UInt8
MetadataDayNightTagType         = fixedint.UInt8
MetadataTakeTagType             = fixedint.Int8
MetadataSlateForTypeType        = fixedint.Int8
MetadataMaxStringLengthType     = fixedint.Int8
MediaTransportFlags             = fixedint.UInt8
ccu_fixed_t                     = fixedint.Int16

class CCUPacketTypes:

    class PacketFormatIndex:
        Destination:PacketFormatIndexType   = 0
        CommandLength:PacketFormatIndexType = 1
        CommandId:PacketFormatIndexType     = 2
        Source:PacketFormatIndexType        = 3
        Category:PacketFormatIndexType      = 4
        Parameter:PacketFormatIndexType     = 5
        DataType:PacketFormatIndexType      = 6
        OperationType:PacketFormatIndexType = 7
        PayloadStart:PacketFormatIndexType  = 8

    class PacketFormatIndex(BaseEnum):
        Destination     = PacketFormatIndexType(0)
        CommandLength   = PacketFormatIndexType(1)
        CommandId       = PacketFormatIndexType(2)
        Source          = PacketFormatIndexType(3)
        Category        = PacketFormatIndexType(4)
        Parameter       = PacketFormatIndexType(5)
        DataType        = PacketFormatIndexType(6)
        OperationType   = PacketFormatIndexType(7)
        PayloadStart    = PacketFormatIndexType(8)

    kPacketSizeMin:fixedint.UInt8        = 8
    kPacketSizeMax:fixedint.UInt8        = 64
    kCCUPacketHeaderSize:fixedint.UInt8  = 4
    kCCUCommandHeaderSize:fixedint.UInt8 = 4
    kCUUPayloadOffset:fixedint.UInt8     = 8

    # Camera ID that is specified to broadcast a command to all cameras
    kBroadcastTarget:fixedint.UInt8 = 255

    def CCUFixedFromfloat(f: float) -> ccu_fixed_t:
        return ccu_fixed_t(f * 2048.0)

    def CCUfloatFromFixed(f: ccu_fixed_t) -> float:
        return float(float(f) / 2048.0)

    def CCUfloatFromFixed(f: fixedint.UInt16) -> float:
        return float(float(f) / 2048.0)

    def CCUPercentFromFixed(f: ccu_fixed_t) -> fixedint.Int32:
        return fixedint.Int32((f * 100) / 2048)
    
    kLensAperture_NoLens:fixedint.Int16 = -32768
    
    class DataTypes:
        kVoid:DataTypesType     = 0
        kBool:DataTypesType     = 0
        kInt8:DataTypesType     = 1
        kInt16:DataTypesType    = 2
        kInt32:DataTypesType    = 3
        kInt64:DataTypesType    = 4
        kString:DataTypesType   = 5
        kFixed16:DataTypesType  = 128
    
    class OperationType(BaseEnum):
        AssignValue     = OperationTypeType(0)
        OffsetValue     = OperationTypeType(1)
        StatusUpdate    = OperationTypeType(2)
    
    class CommandID(BaseEnum):
        ChangeConfiguration = CommandIDType(0)
    
    # Command Category
    class Category(BaseEnum):
        Lens                    = CategoryType(0)
        Video                   = CategoryType(1)
        Audio                   = CategoryType(2)
        Output                  = CategoryType(3)
        Display                 = CategoryType(4)
        Tally                   = CategoryType(5)
        Reference               = CategoryType(6)
        Configuration           = CategoryType(7)
        ColorCorrection         = CategoryType(8)
        Status                  = CategoryType(9)
        Media                   = CategoryType(10)
        ExternalDeviceControl   = CategoryType(11)
        Metadata                = CategoryType(12)
    
    # * Parameters for each Command Category# *
    class LensParameter(BaseEnum):
        Focus               = LensParameterType(0)
        AutoFocus           = LensParameterType(1)
        ApertureFstop       = LensParameterType(2)
        ApertureNormalised  = LensParameterType(3)
        ApertureOrdinal     = LensParameterType(4)
        AutoAperture        = LensParameterType(5)
        ImageStabilisation  = LensParameterType(6)
        Zoom                = LensParameterType(7)
        ZoomNormalised      = LensParameterType(8)
        ContinuousZoom      = LensParameterType(9)
    
    class VideoParameter(BaseEnum):
        Mode                = VideoParameterType(0)
        SensorGain          = VideoParameterType(1)
        ManualWB            = VideoParameterType(2)
        SetAutoWB           = VideoParameterType(3)
        RestoreAutoWB       = VideoParameterType(4)
        Exposure            = VideoParameterType(5)
        ExposureOrdinal     = VideoParameterType(6)
        DynamicRange        = VideoParameterType(7)
        SharpeningLevel     = VideoParameterType(8)
        RecordingFormat     = VideoParameterType(9)
        AutoExposureMode    = VideoParameterType(10)
        ShutterAngle        = VideoParameterType(11)
        ShutterSpeed        = VideoParameterType(12)
        Gain                = VideoParameterType(13)
        ISO                 = VideoParameterType(14)
        DisplayLUT          = VideoParameterType(15)
        NDFilterStop        = VideoParameterType(16)
    
    class AudioParameter(BaseEnum):
        MicLevel            = AudioParameterType(0)
        HeadphoneLevel      = AudioParameterType(1)
        HeadphoneProgramMix = AudioParameterType(2)
        SpeakerLevel        = AudioParameterType(3)
        InputType           = AudioParameterType(4)
        InputLevels         = AudioParameterType(5)
        PhantomPower        = AudioParameterType(6)

    class OutputParameter(BaseEnum):
        OverlayEnables      = OutputParameterType(0)
        FrameGuideStyle     = OutputParameterType(1) # legacy Cameras 3.x packet was never de-embedded by camera
        FrameGuideOpacity   = OutputParameterType(2) # legacy Cameras 3.x packet was never de-embedded by camera
        Overlays            = OutputParameterType(3)

    class DisplayParameter(BaseEnum):
        Brightness          = DisplayParameterType(0)
        Overlays            = DisplayParameterType(1)
        ZebraLevel          = DisplayParameterType(2)
        PeakingLevel        = DisplayParameterType(3)
        ColourBars          = DisplayParameterType(4)
        FocusAssist         = DisplayParameterType(5)
        TimecodeSource      = DisplayParameterType(7)
    
    class TallyParameter(BaseEnum):
        Brightness          = TallyParameterType(0)
        FrontBrightness     = TallyParameterType(1)
        RearBrightness      = TallyParameterType(2)
    
    class ReferenceParameter(BaseEnum):
        Source              = ReferenceParameterType(0)
        Offset              = ReferenceParameterType(1)
    
    class ConfigurationParameter(BaseEnum):
        SystemClock         = ConfigurationParameterType(0)
        Language            = ConfigurationParameterType(1)
        Timezone            = ConfigurationParameterType(2)
        Location            = ConfigurationParameterType(3)
    
    class ColorCorrectionParameter(BaseEnum):
        LiftAdjust          = ColorCorrectionParameterType(0)
        GammaAdjust         = ColorCorrectionParameterType(1)
        GainAdjust          = ColorCorrectionParameterType(2)
        OffsetAdjust        = ColorCorrectionParameterType(3)
        ContrastAdjust      = ColorCorrectionParameterType(4)
        LumaContribution    = ColorCorrectionParameterType(5)
        ColourAdjust        = ColorCorrectionParameterType(6)
        ResetDefault        = ColorCorrectionParameterType(7)
    
    class StatusParameter(BaseEnum):
        Battery             = StatusParameterType(0)
        MediaStatus         = StatusParameterType(1)
        RemainingRecordTime = StatusParameterType(2)
        DisplayThresholds   = StatusParameterType(3)
        DisplayTimecode     = StatusParameterType(4)
        CameraSpec          = StatusParameterType(5)
        SwitcherStatus      = StatusParameterType(6)
        DisplayParameters   = StatusParameterType(7)
    
    class MediaParameter(BaseEnum):
        Codec               = MediaParameterType(0)
        TransportMode       = MediaParameterType(1)

    class ExDevControlParameter(BaseEnum):
        PanTiltVelocity     = ExDevControlParameterType(0)
    
    class MetadataParameter(BaseEnum):
        Reel                = MetadataParameterType(0)
        SceneTags           = MetadataParameterType(1)
        Scene               = MetadataParameterType(2)
        Take                = MetadataParameterType(3)
        GoodTake            = MetadataParameterType(4)
        CameraId            = MetadataParameterType(5)
        CameraOperator      = MetadataParameterType(6)
        Director            = MetadataParameterType(7)
        ProjectName         = MetadataParameterType(8)
        LensType            = MetadataParameterType(9)
        LensIris            = MetadataParameterType(10)
        LensFocalLength     = MetadataParameterType(11)
        LensDistance        = MetadataParameterType(12)
        LensFilter          = MetadataParameterType(13)
        SlateForType        = MetadataParameterType(14)
        SlateForName        = MetadataParameterType(15)
    
    # * Data Structure and Enums, orgranised by Command Category: Parameter# * 
    # Video: Video Mode: MRate
    class VideoModeMRate(BaseEnum):
        Regular             = VideoModeMRateType(0)
        MRate               = VideoModeMRateType(1)

    # Video: Video Mode: Dimensions
    class VideoModeDimensions(BaseEnum):
        NTSC                = VideoModeDimensionsType(0)
        PAL                 = VideoModeDimensionsType(1)
        HD720               = VideoModeDimensionsType(2)
        HD1080              = VideoModeDimensionsType(3)
        _2K                 = VideoModeDimensionsType(4)
        _2KDCI              = VideoModeDimensionsType(5)
        UHD4K               = VideoModeDimensionsType(6)
    
    # Video: Video Mode: fixedint.Interlaced
    class VideoModeInterlaced(BaseEnum):
        Progressive         = VideoModeInterlacedType(0)
        Interlaced          = VideoModeInterlacedType(1)
    
    # Video: Video Mode: Colorspace
    class VideoModeColorspace(BaseEnum):
        YUV                 = VideoModeColorspaceType(0)
    
    # Video: Dynamic Range
    class VideoDynamicRange(BaseEnum):
        Film                = VideoDynamicRangeType(0)
        Video               = VideoDynamicRangeType(1)    

    # Video: Recording Format: Flags
    VideoRecordingFormatFlags = fixedint.UInt16
    class VideoRecordingFormat(BaseEnum):
        FileMRate           = VideoRecordingFormatType(0x01)
        SensorMRate         = VideoRecordingFormatType(0x02)
        SensorOffSpeed      = VideoRecordingFormatType(0x04)
        Interlaced          = VideoRecordingFormatType(0x08)
        WindowedMode        = VideoRecordingFormatType(0x10)
    
	# Video: Auto Exposure Mode
    class AutoExposureMode(BaseEnum):
        Manual              = AutoExposureModeType(0)
        Iris                = AutoExposureModeType(1)
        Shutter             = AutoExposureModeType(2)
        IrisAndShutter      = AutoExposureModeType(3)
        ShutterAndIris      = AutoExposureModeType(4)
	
    # Diplay: Timecode Source
    class DisplayTimecodeSource(BaseEnum):
        Clip                = DisplayTimecodeSourceType(0)
        Timecode            = DisplayTimecodeSourceType(1)
    
    # Status: Battery: Flags
    StatusBatteryFlags = fixedint.UInt16
    class BatteryStatus(BaseEnum):
        BatteryPresent                          = BatteryStatusType(0x01)
        ACPresent                               = BatteryStatusType(0x02)
        BatteryIsCharging                       = BatteryStatusType(0x04)
        ChargeRemainingPercentageIsEstimated    = BatteryStatusType(0x08)
        PreferVoltageDisplay                    = BatteryStatusType(0x10)
    
    # Status: Media
    class MediaStatus(BaseEnum):
        NONE                = MediaStatusType(0)
        Ready               = MediaStatusType(1)
        MountError          = MediaStatusType(-1)
        RecordError         = MediaStatusType(-2)
    
    # Status: Video display settings

    class DisplayFocusAssistMode(BaseEnum):
        ColouredLines       = DisplayFocusAssistModeType(0)
        Peak                = DisplayFocusAssistModeType(1)
    
    class ApertureUnits(BaseEnum):
        Fstops              = ApertureUnitsType(0)
        Tstops              = ApertureUnitsType(1)

    class ApertureStepLength(BaseEnum):
        FullStop		    = ApertureStepLengthType(0)
        HalfStop            = ApertureStepLengthType(1)
        QuarterStop	        = ApertureStepLengthType(2)
        EighthStop 	        = ApertureStepLengthType(3)
        SixteenthStop 	    = ApertureStepLengthType(4)

    class DisplayFocusAssistColour(BaseEnum):
        Red                 = DisplayFocusAssistColourType(0)
        Green               = DisplayFocusAssistColourType(1)
        Blue                = DisplayFocusAssistColourType(2)
        White               = DisplayFocusAssistColourType(3)
        Black               = DisplayFocusAssistColourType(4)
    
    # Status: Camera Specifications: Manufacturer
    class CameraManufacturer(BaseEnum):
        Blackmagic          = CameraManufacturerType(0)
    
    # Status: Camera Specifications: Camera Variant
    CameraVariant = fixedint.UInt8
    class CameraVariants:
        kDefault:CameraVariantsType = 0
        kURSAMini_46K:CameraVariantsType = 0
        kURSAMini_4K:CameraVariantsType = 0
        kURSA_4K_V1:CameraVariantsType = 0
        kURSA_4K_V2:CameraVariantsType = 1
        kURSA_46K:CameraVariantsType = 2
    
    # Status: Camera Specifications: Color Science Generation
    class ColorScienceGeneration(BaseEnum):
        Unknown             = ColorScienceGenerationType(0)
        Generation3         = ColorScienceGenerationType(3)
    
    # Output: Overlay Enables: Frame Guide Style
    class FrameGuideStyle(BaseEnum):
        Off                 = FrameGuideStyleType(0)
        _240_1              = FrameGuideStyleType(1)
        _239_1              = FrameGuideStyleType(2)
        _235_1              = FrameGuideStyleType(3)
        _185_1              = FrameGuideStyleType(4)
        _16_9               = FrameGuideStyleType(5)
        _14_9               = FrameGuideStyleType(6)
        _4_3                = FrameGuideStyleType(7)
        _2_1                = FrameGuideStyleType(8)
        _4_5                = FrameGuideStyleType(9)
        _1_1                = FrameGuideStyleType(10)
        Custom              = FrameGuideStyleType(11)
    
    # Output: Overlay Enables: Grid Style
    GridStyleFlags = fixedint.UInt8
    class GridStyleFlag(BaseEnum):
        Thirds              = GridStyleFlagType(0x01)
        CrossHairs          = GridStyleFlagType(0x02)
        CenterDot           = GridStyleFlagType(0x04)
    
    # Status: Switcher Status: Flags
    SwitcherStatusFlags = fixedint.UInt8
    class SwitcherStatusFlag(BaseEnum):
        SwitcherConnected   = SwitcherStatusFlagType(0x01)
        PreviewTally        = SwitcherStatusFlagType(0x02)
        ProgramTally        = SwitcherStatusFlagType(0x04)
    
    # Media: Codec: Basic Codec
    class BasicCodec(BaseEnum):
        RAW                 = BasicCodecType(0)
        DNxHD               = BasicCodecType(1)
        ProRes              = BasicCodecType(2)
    
    # Media: Codec: Codec Variant
    class CodecVariants:
        kDefault:CodecVariantsType = 0
        kProResHQ:CodecVariantsType = 0
        kProRes422:CodecVariantsType = 1
        kProResLT:CodecVariantsType = 2
        kProResProxy:CodecVariantsType = 3
        kProRes444:CodecVariantsType = 4
        kProRes444XQ:CodecVariantsType = 5

        kLosslessRaw:CodecVariantsType = 0
        kRaw3_1:CodecVariantsType = 1
        kRaw4_1:CodecVariantsType = 2
    
    # Media: Transport Mode: Mode
    class MediaTransportMode(BaseEnum):
        Preview             = MediaTransportModeType(0)
        Play                = MediaTransportModeType(1)
        Record              = MediaTransportModeType(2)
    
    # Media: Transport Mode: Flags
    class MediaTransportFlag(BaseEnum):
        Loop                = MediaTransportFlagType(0x01)
        PlayAll             = MediaTransportFlagType(0x02)
        Disk1Active         = MediaTransportFlagType(0x20)
        Disk2Active         = MediaTransportFlagType(0x40)
        Disk3Active         = MediaTransportFlagType(0x10)
        TimelapseRecording  = MediaTransportFlagType(0x80)
    
    slotActiveMasks = [
		MediaTransportFlag.Disk1Active.value,
		MediaTransportFlag.Disk2Active.value,
		MediaTransportFlag.Disk3Active.value,
		0
	]

    class ActiveStorageMedium(BaseEnum):
        CFastCard           = ActiveStorageMediumType(0)
        SDCard              = ActiveStorageMediumType(1)
        SSD                 = ActiveStorageMediumType(2)
        USB                 = ActiveStorageMediumType(3)
    
    class MetadataSceneTag(BaseEnum):
        NONE                = MetadataSceneTagType(-1)
        WS                  = MetadataSceneTagType(0)
        CU                  = MetadataSceneTagType(1)
        MS                  = MetadataSceneTagType(2)
        BCU                 = MetadataSceneTagType(3)
        MCU                 = MetadataSceneTagType(4)
        ECU                 = MetadataSceneTagType(5)
    
    class MetadataLocationTypeTag(BaseEnum):
        Exterior            = MetadataLocationTypeTagType(0)
        Interior            = MetadataLocationTypeTagType(1)
    
    class MetadataDayNightTag(BaseEnum):
        Night               = MetadataDayNightTagType(0)
        Day                 = MetadataDayNightTagType(1)
    
    class MetadataTakeTag(BaseEnum):
        NONE                = MetadataTakeTagType(-1)
        PU                  = MetadataTakeTagType(0)
        VFX                 = MetadataTakeTagType(1)
        SER                 = MetadataTakeTagType(2)
    
    class MetadataSlateForType(BaseEnum):
        NextClip            = MetadataSlateForTypeType(0)
        PlaybackFile        = MetadataSlateForTypeType(1)
    
    class MetadataMaxStringLength:
        kScene              = MetadataMaxStringLengthType(5)
        kCameraId           = MetadataMaxStringLengthType(1)
        kCameraOperator     = MetadataMaxStringLengthType(29)
        kDirector           = MetadataMaxStringLengthType(29)
        kProjectName        = MetadataMaxStringLengthType(29)
        kLensType           = MetadataMaxStringLengthType(56)
        kLensIris           = MetadataMaxStringLengthType(20)
        kLensFocalLength    = MetadataMaxStringLengthType(30)
        kLensDistance       = MetadataMaxStringLengthType(50)
        kLensFilter         = MetadataMaxStringLengthType(30)

    MetadataParameterToStringLengthMap = {
        MetadataParameter.Scene: MetadataMaxStringLength.kScene,
        MetadataParameter.CameraId: MetadataMaxStringLength.kCameraId,
        MetadataParameter.CameraOperator: MetadataMaxStringLength.kCameraOperator,
        MetadataParameter.Director: MetadataMaxStringLength.kDirector,
        MetadataParameter.ProjectName: MetadataMaxStringLength.kProjectName,
        MetadataParameter.LensType: MetadataMaxStringLength.kLensType,
        MetadataParameter.LensIris: MetadataMaxStringLength.kLensIris,
        MetadataParameter.LensFocalLength: MetadataMaxStringLength.kLensFocalLength,
        MetadataParameter.LensDistance: MetadataMaxStringLength.kLensDistance,
        MetadataParameter.LensFilter: MetadataMaxStringLength.kLensFilter,
    }

    class RecordingFormatData:
		
        def __init__(self):
            frameRate:fixedint.Int16            = 0
            offSpeedFrameRate:fixedint.Int16    = 0
            width:fixedint.Int16                = 0
            height:fixedint.Int16               = 0
            mRateEnabled:bool                   = False
            offSpeedEnabled:bool                = False
            interlacedEnabled:bool              = False
            windowedModeEnabled:bool            = False

    # * Command Structure# * 
    class Command:

        def __init__(self):
            target:fixedint.UInt8 = 0 # Destination device
            length:fixedint.UInt8 = 0 # Length of this command (excluding the 4-byte Command Header)
            commandID = CCUPacketTypes.CommandID.ChangeConfiguration
            reserved = 0
            category = CCUPacketTypes.Category(0)
            parameter:fixedint.UInt8 = 0
            dataType:CCUPacketTypes.DataType = 0
            operationType = CCUPacketTypes.OperationType.AssignValue
            data = bytearray(0)
        
        def serialize(self):
            headersSize = CCUPacketTypes.kCCUPacketHeaderSize + CCUPacketTypes.kCCUCommandHeaderSize
            payloadSize = fixedint.UInt8(len(self.data))
            padBytes:fixedint.UInt8 = ((self.length + 3) & ~3) - self.length
            buffer = bytearray(headersSize + payloadSize + padBytes)

            buffer[CCUPacketTypes.PacketFormatIndex.Destination]    = self.target
            buffer[CCUPacketTypes.PacketFormatIndex.CommandLength]  = self.length
            buffer[CCUPacketTypes.PacketFormatIndex.CommandId]      = self.commandID.rawValue
            buffer[CCUPacketTypes.PacketFormatIndex.Source]         = self.reserved
            buffer[CCUPacketTypes.PacketFormatIndex.Category]       = self.category.rawValue
            buffer[CCUPacketTypes.PacketFormatIndex.Parameter]      = self.parameter
            buffer[CCUPacketTypes.PacketFormatIndex.DataType]       = self.dataType
            buffer[CCUPacketTypes.PacketFormatIndex.OperationType]  = self.operationType.value

            for payloadIndex in range(len(self.data)):
                packetIndex = CCUPacketTypes.PacketFormatIndex.PayloadStart + fixedint.Int32(payloadIndex)
                buffer[packetIndex] = self.data[fixedint.Int32(payloadIndex)]
            
            return buffer

    def InitCommand(    target: fixedint.UInt8, \
                        commandId: CommandID , \
                        category: Category, \
                        parameter: fixedint.UInt8, \
                        operationType: OperationType, \
                        dataType: DataTypes, \
                        data: List[fixedint.UInt8]) -> Command:
        commandLength = CCUPacketTypes.kCCUCommandHeaderSize + fixedint.UInt8(len(data))
        packetSize = commandLength + CCUPacketTypes.kCCUPacketHeaderSize
        if packetSize > CCUPacketTypes.kPacketSizeMax:
            Logger.LogError("Packet size {} exceeds kPacketSizeMax {}. Aborting InitCommand.".format(packetSize, CCUPacketTypes.kCCUPacketHeaderSize))
            return None
        
        command = CCUPacketTypes.Command()

        command.target          = target
        command.length          = commandLength
        command.commandID       = commandId
        command.reserved        = 0
        command.category        = category
        command.parameter       = parameter
        command.operationType   = operationType
        command.dataType        = dataType
        command.data            = data

        return command
    

