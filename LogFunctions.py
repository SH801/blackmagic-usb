# -LICENSE-START-
# Copyright (c) 2018 Blackmagic Design
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# -LICENSE-END-
#

import os
import inspect
import logging
from logging import getLogger, getLevelName, Formatter, StreamHandler
from Config import LOGGINGLEVEL

log = getLogger()
log.setLevel(LOGGINGLEVEL)
log_formatter = Formatter("%(asctime)s [%(levelname)s] %(name)s [%(threadName)s]: %(message)s")
console_handler = StreamHandler()
console_handler.setFormatter(log_formatter)
log.addHandler(console_handler)

class Logger:

	def Log(message, level=logging.DEBUG):
		match level:
			case logging.DEBUG:     logging.debug(message)
			case logging.INFO:      logging.info(message)
			case logging.WARNING:   logging.warning(message)
			case logging.ERROR:     logging.error(message)
			case _:                 pass

	def LogInfo(message, caller=None):
		if caller is None: caller = inspect.stack()[1]
		Logger.Log(message, level=logging.INFO)

	def LogWithInfo(message, caller=None, level=logging.DEBUG):
		if caller is None: caller = inspect.stack()[1]
		Logger.Log("[{}:{} {}()]: {}".format(os.path.basename(caller.filename), caller.lineno, caller.function, message), level)

	def ThreadLogWithInfo(message, caller=None, level=logging.INFO):
		if caller is None: caller = inspect.stack()[1]
		Logger.Log("[{}:{} {}()]: {}".format(os.path.basename(caller.filename), caller.lineno, caller.function, message), level)

	def LogWarning(message, caller=None):
		if caller is None: caller = inspect.stack()[1]
		Logger.LogWithInfo("Warning: {}".format(message), caller, logging.WARNING)

	def LogNoPacketDataWarning(packetType, caller=None):
		if caller is None: caller = inspect.stack()[1]
		Logger.LogWithInfo("Warning: Received a {} packet with no data. Is this a problem?".format(packetType), caller, logging.WARNING)

	def LogError(message, caller=None):
		if caller is None: caller = inspect.stack()[1]
		Logger.LogWithInfo("Error: {}".format(message), caller, logging.ERROR)

	def LogPayloadNoDataError(caller=None):
		if caller is None: caller = inspect.stack()[1]
		Logger.LogError("No data in payload.", caller)
