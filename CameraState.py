# -LICENSE-START-
# Copyright (c) 2018 Blackmagic Design
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# -LICENSE-END-
#

import fixedint
from typing import List
from CCUPacketTypes import *
from RecordTimeWarning import *
from CameraModel import *
from LensConfig import *
from VideoConfig import *
from TransportInfo import *

class SlotState:
	status                                  = CCUPacketTypes.MediaStatus.NONE
	displayedRemainingRecordTime            = "Transport.NoCard"
	remainingRecordTime                     = "Transport.NoCard"
	recordTimeWarning                       = RecordTimeWarning.NoWarning
	remainingTimeInMinutes:fixedint.Int16   = 0

class CameraState:

	def __init__(self):	
		self.cameraModel                        = CameraModel.Unknown
		self.whiteBalance                       = fixedint.Int16(2500)
		self.tint                               = fixedint.Int16(0)
		self.customWhiteBalance                 = fixedint.Int16(2500)
		self.customTint                         = fixedint.Int16(0)
		self.autoWhiteBalancePacketsExpected    = fixedint.Int32(0)
		self.fstop                              = float(0.0)
		self.stopUnits                          = LensConfig.ApertureUnits.Fstops
		self.apertureNormalised                 = float(0.0)
		self.shutterAngle                       = float(180.0)
		self.ISO                                = fixedint.Int32(200)
		self.gain                               = Decibels(-6)
		self.ndFilterStop                       = float(0.0)
		self.ndFilterDisplayMode                = VideoConfig.NDFilterDisplayMode.Stop
		self.shutterSpeed                       = fixedint.Int32(0)
		self.focusPosition                      = fixedint.Int32(0)
		self.recordingFormatData                = CCUPacketTypes.RecordingFormatData()
		self.frameRateForShutterCalculations    = fixedint.Int16(0)
		self.slots                              = [SlotState]
		self.hasRecordingError                  = False
		self.anyMediaWithError                  = False
		self.reel                               = fixedint.Int32(0)
		self.reelEditable                       = False
		self.scene                              = ""
		self.sceneTag                           = CCUPacketTypes.MetadataSceneTag.NONE
		self.locationTag                        = CCUPacketTypes.MetadataLocationTypeTag.Exterior
		self.timeTag                            = CCUPacketTypes.MetadataDayNightTag.Night
		self.goodTake                           = False
		self.takeNumber                         = fixedint.Int32(0)
		self.takeTag                            = CCUPacketTypes.MetadataTakeTag.NONE
		self.slateName                          = ""
		self.slateType                          = CCUPacketTypes.MetadataSlateForType.NextClip
		self.transportInfo                      = TransportInfo
		self.autoExposureMode                   = CCUPacketTypes.AutoExposureMode.Manual
		self.timecode                           = "00:00:00:00"
		self.timecodeSource                     = CCUPacketTypes.DisplayTimecodeSource.Clip

	def updateTransportInfo(self, info: TransportInfo):
		old = self.transportInfo
		anySlotActive = (len(list(filter(lambda x: x.active, info.slots))) != 0)
		fromPreviewMode = (old.transportMode == CCUPacketTypes.MediaTransportMode.Preview) & (info.transportMode != CCUPacketTypes.MediaTransportMode.Preview)
		slotMediumChanged = not ([slot.medium for slot in old.slots] == [slot.medium for slot in info.slots])	
		self.anyMediaWithError = self.anyMediaWithError & anySlotActive & (not fromPreviewMode) & (not slotMediumChanged)
		self.hasRecordingError = self.hasRecordingError | self.hasRecordingError if info.transportMode == CCUPacketTypes.MediaTransportMode.Record else self.anyMediaWithError
		self.transportInfo = info
		if len(self.slots) != len(info.slots):
			self.slots = [SlotState() for i in range(len(info.slots))]
