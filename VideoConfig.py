# -LICENSE-START-
# Copyright (c) 2018 Blackmagic Design
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# -LICENSE-END-
#

from typing import List
import fixedint
from CameraModel import *

Decibels = fixedint.Int32

class VideoConfig:
    class WhiteBalancePreset:

        def __init__(self, whiteBalance: fixedint.Int16, tint: fixedint.Int16):
            self.whiteBalance = fixedint.Int16(whiteBalance)
            self.tint = fixedint.Int16(tint)

    kWhiteBalancePresets = [
        WhiteBalancePreset(whiteBalance=5600, tint=10),
        WhiteBalancePreset(whiteBalance=3200, tint=0),
        WhiteBalancePreset(whiteBalance=4000, tint=15),
        WhiteBalancePreset(whiteBalance=4500, tint=15),
        WhiteBalancePreset(whiteBalance=6500, tint=10),
    ]

    kWhiteBalanceMin        = fixedint.Int16(2500)
    kWhiteBalanceMax        = fixedint.Int16(10000)
    kWhiteBalanceStep       = fixedint.Int16(50)

    kTintMin                = fixedint.Int16(-50)
    kTintMax                = fixedint.Int16(50)

    kOffSpeedFrameRateMin = {
        CameraModel.Unknown:                    5,      # Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the lowest possible value across all products.	
        CameraModel.URSAMiniPro:                12,
        CameraModel.URSABroadcast:              5,
        CameraModel.URSABroadcastG2:            5,
        CameraModel.URSAMiniProG2:              12,
        CameraModel.URSAMiniPro12K:             12,
        CameraModel.PocketCinemaCamera4K:       5,
        CameraModel.PocketCinemaCamera6K:       5,
        CameraModel.PocketCinemaCamera6KG2:     5,
        CameraModel.PocketCinemaCamera6KPro:    5,
    }

    kOffSpeedFrameRateMax = {
        CameraModel.Unknown:                    300,	# Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the highest possible value across all products.
        CameraModel.URSAMiniPro:                120,
        CameraModel.URSABroadcast:              120,
        CameraModel.URSABroadcastG2:            120,
        CameraModel.URSAMiniProG2:              300,
        CameraModel.URSAMiniPro12K:             240,
        CameraModel.PocketCinemaCamera4K:       120,
        CameraModel.PocketCinemaCamera6K:       120,
        CameraModel.PocketCinemaCamera6KG2:     120,
        CameraModel.PocketCinemaCamera6KPro:    120,
    }

    kISOValuesPocket     = [100, 125, 160, 200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200, 4000, 5000, 6400, 8000, 10000, 12800, 16000, 20000, 25600]
    kISOValuesURSA       = [200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200]
    kISOValuesURSA12K    = [125, 160, 200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200]

    kISOValues = {
        CameraModel.Unknown:                    kISOValuesPocket,	# Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the largest range.
        CameraModel.URSAMiniPro:                kISOValuesURSA,
        CameraModel.URSABroadcast:              kISOValuesURSA,
        CameraModel.URSABroadcastG2:            kISOValuesURSA,
        CameraModel.URSAMiniProG2:              kISOValuesURSA,
        CameraModel.URSAMiniPro12K:             kISOValuesURSA12K,
        CameraModel.PocketCinemaCamera4K:       kISOValuesPocket,
        CameraModel.PocketCinemaCamera6K:       kISOValuesPocket,
        CameraModel.PocketCinemaCamera6KG2:     kISOValuesPocket,
        CameraModel.PocketCinemaCamera6KPro:    kISOValuesPocket,
    }

    gainDecibelValuesUrsaBroadcast      = [*range(-6, 18, 2)]
    gainDecibelValuesUrsaBroadcastG2    = [*range(-12, 36,2)]

    gainValues = {
        CameraModel.Unknown:            gainDecibelValuesUrsaBroadcastG2,
        CameraModel.URSABroadcast:      gainDecibelValuesUrsaBroadcast,
        CameraModel.URSABroadcastG2:    gainDecibelValuesUrsaBroadcastG2,
    }

    kSentSensorGainBase                 = fixedint.UInt16(100)
    kReceivedSensorGainBase             = fixedint.UInt16(200)

    kShutterAngles                      = [11.2, 15.0, 22.5, 30.0, 37.5, 45.0, 60.0, 72.0, 75.0, 90.0, 108.0, 120.0, 144.0, 150.0, 172.8, 180.0, 216.0, 270.0, 324.0, 360.0]
    kShutterSpeeds                      = [fixedint.Int32(24), fixedint.Int32(25), fixedint.Int32(30), fixedint.Int32(50), fixedint.Int32(60), fixedint.Int32(100), fixedint.Int32(125), fixedint.Int32(200), fixedint.Int32(250), fixedint.Int32(500), fixedint.Int32(1000), fixedint.Int32(2000)]
    kShutterSpeedMin                    = fixedint.Int32(24)
    kShutterSpeedMax                    = fixedint.Int32(2000)
    kShutterAngleMin                    = 5.0
    kShutterAngleMax                    = 360.0

    kAvailableNDFilterStops             = [0.0, 2.0, 4.0, 6.0]

    NDFilterDisplayModeType = fixedint.Int16
    class NDFilterDisplayMode(BaseEnum):
        Stop           = fixedint.Int16(0)
        Density        = fixedint.Int16(1)
        Transmittance  = fixedint.Int16(2)

    kNDFilterTextForStopForDisplayMode = {
        0.0: {
            NDFilterDisplayMode.Stop:           "Clear",
            NDFilterDisplayMode.Density:        "Clear",
            NDFilterDisplayMode.Transmittance:  "Clear"
        },
        2.0: {
            NDFilterDisplayMode.Stop:           "2.0 Stops",
            NDFilterDisplayMode.Density:        "0.6",
            NDFilterDisplayMode.Transmittance:  "1/4"
        },
        4.0: {
            NDFilterDisplayMode.Stop:           "4.0 Stops",
            NDFilterDisplayMode.Density:        "1.2",
            NDFilterDisplayMode.Transmittance:  "1/16"
        },
        6.0: {
            NDFilterDisplayMode.Stop:           "6.0 Stops",
            NDFilterDisplayMode.Density:        "1.8",
            NDFilterDisplayMode.Transmittance:  "1/64"
        }
    }

    kProductHasNDFilter = [
        CameraModel.URSABroadcast,
        CameraModel.URSABroadcastG2,
        CameraModel.URSAMiniPro,
        CameraModel.URSAMiniProG2,
        CameraModel.PocketCinemaCamera6KPro,
        CameraModel.URSAMiniPro12K,
    ]

    kProductCanChangeNDFilterRemotely = [
        CameraModel.PocketCinemaCamera6KPro,
    ]

    def GetWhiteBalancePresetFromValues(whiteBalance: fixedint.Int16, tint: fixedint.Int16) -> fixedint.Int32:
        presetIndex = fixedint.Int32(0)
        for preset in VideoConfig.kWhiteBalancePresets:
            if (whiteBalance == preset.whiteBalance) & (tint == preset.tint):
                return presetIndex

            presetIndex += 1

        return -1

    def GetShutterSpeed(angle: float, frameRate: fixedint.Int16, mRateEnabled: bool) -> fixedint.Int32:
        if frameRate <= 0: return 0

        if mRateEnabled:
            frameRateReciprocal = float(1.0 / frameRate)
            angleFraction = float(angle / 360.0)
            exposure = fixedint.Int32(frameRateReciprocal * angleFraction * 1_001_000.0) + 1
            return exposure
        else:
            frameRateReciprocal = float(1.0 / frameRate)
            angleFraction = float(angle / 360.0)
            exposure = fixedint.Int32(frameRateReciprocal * angleFraction * 1_000_000.0) + 1
            return exposure

    def GetShutterAngleIndex(shutterSpeed: fixedint.Int32, frameRate: fixedint.Int16) -> fixedint.Int32:
        if frameRate <= 0: return 0

        frameRateReciprocal = float(1.0 / frameRate)
        angleFraction = float(shutterSpeed / (frameRateReciprocal * 1_000_000.0))
        angle = float(angleFraction * 360.0)

        closestAngle = float(360.0)
        closestIndex = fixedint.Int32(-1)

        shutterIndex = 0
        for shutterAngle in VideoConfig.kShutterAngles:
            difference = abs(angle - shutterAngle)

            if difference < closestAngle:
                closestAngle = difference
                closestIndex = shutterIndex

            shutterIndex += 1

        return closestIndex

    def GetShutterAngle(shutterSpeed: fixedint.Int32, frameRate: fixedint.Int16, mRateEnabled: bool) -> float:
        if frameRate <= 0:
            return 0

        if mRateEnabled:
            frameRateReciprocal = float(1.0 / frameRate)
            angleFraction       = float(shutterSpeed / (frameRateReciprocal * 1_001_000.0))
            angle               = float(angleFraction * 360.0)

            return float(fixedint.Int32((angle * 10.0).round())) / 10.0
        else:
            frameRateReciprocal = float(1.0 / frameRate)
            angleFraction       = float(shutterSpeed / (frameRateReciprocal * 1_000_000.0))
            angle               = float(angleFraction * 360.0)

            return float(fixedint.Int32((angle * 10.0).round()) / 10.0)
